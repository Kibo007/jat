create table "public"."positions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "description" text,
    "job_title" text,
    "contact" text,
    "status" text,
    "company" text,
    "hourly_rate" numeric,
    "position_url" text,
    "location" text,
    "user_id" uuid,
    "excitement" numeric default '0'::numeric
);


alter table "public"."positions" enable row level security;

CREATE UNIQUE INDEX position_pkey ON public.positions USING btree (id);

alter table "public"."positions" add constraint "position_pkey" PRIMARY KEY using index "position_pkey";

grant delete on table "public"."positions" to "anon";

grant insert on table "public"."positions" to "anon";

grant references on table "public"."positions" to "anon";

grant select on table "public"."positions" to "anon";

grant trigger on table "public"."positions" to "anon";

grant truncate on table "public"."positions" to "anon";

grant update on table "public"."positions" to "anon";

grant delete on table "public"."positions" to "authenticated";

grant insert on table "public"."positions" to "authenticated";

grant references on table "public"."positions" to "authenticated";

grant select on table "public"."positions" to "authenticated";

grant trigger on table "public"."positions" to "authenticated";

grant truncate on table "public"."positions" to "authenticated";

grant update on table "public"."positions" to "authenticated";

grant delete on table "public"."positions" to "service_role";

grant insert on table "public"."positions" to "service_role";

grant references on table "public"."positions" to "service_role";

grant select on table "public"."positions" to "service_role";

grant trigger on table "public"."positions" to "service_role";

grant truncate on table "public"."positions" to "service_role";

grant update on table "public"."positions" to "service_role";

create policy "auth user insert item"
on "public"."positions"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "authenticated users only"
on "public"."positions"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "delete auth policy"
on "public"."positions"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "update position"
on "public"."positions"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



